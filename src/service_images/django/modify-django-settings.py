"""
modify-django-settings
Usage:
  modify-django-settings <settings-file-path> <mysql-config-file-path> [--mysql]
  modify-django-settings (-h | --help)
Options:
  -h --help                         Show this screen
  --version                         Show version
Help:
  Allows you to easily modify the Django settings.py file. Requires the path
  to the Django settings.py file to modify
"""
from docopt import docopt
import json
import ast
import inspect


# Given python code in string form and a start index, returns the index
# one past the end of the next complete python dict in the string
def get_end_of_dict_index_from_code_string(code_string, start_index):
    braces_count = 0
    num_braces_found = 0
    dict_start_index = 0

    i = start_index

    while braces_count != 0 or num_braces_found == 0:
        char = code_string[i]

        if char == '{':
            if num_braces_found == 0:
                dict_start_index = i

            braces_count += 1
            num_braces_found += 1

        elif char == '}':
            braces_count -= 1

        i += 1

    # Don't do the following, because instead we'll just completely replace
    # 'default' from the Django options
    # In future, though, we might not want to do that, so keep this code here
    # as a reference
    # # Stringify the dict, in case it has references to variables/funcions/etc
    # # Later, we will remove the _cumulus_tmp key/quotes
    # stringified_code = "{{'_cumulus_tmp': '''{}'''}}".format(
    #     code_string[dict_start_index + 1 : i]
    # )

    return i


def overwrite_settings_for_mysql(settings_as_string, mysql_config_file_path):
    # Define the settings string that will be used to hook Django up with
    # MySQL
    # Depending on the text editor, this may only use tabs, even if the original
    # file was set up to use spaces. However, python will not error on this,
    # since the whitespace in a dictionary is not necessary. So, this is fine
    # for now (although would be more ideal if we found a way to replicate
    # the original tabulation mode)
    mysql_database_settings_string = (""
    "DATABASES = {{\n"
    "\t# This was generated by Stratocumulus, since you initialized a Project\n"
    "\t# with both Django and MySQL! For more information about this setting,\n"
    "\t# see the Django documentation\n"
    "\t'default': {{\n"
    "\t\t'ENGINE': 'django.db.backends.mysql',\n"
    "\t\t'OPTIONS': {{\n"
    "\t\t\t'read_default_file': '{user_mysql_config_path}'\n"
    "\t\t}},\n"
    "\t}}\n"
    "}}"
    ).format(user_mysql_config_path=arguments['<mysql-config-file-path>'])

    databases_dict_start_index = settings_as_string.index('DATABASES')

    databases_dict_end_index = get_end_of_dict_index_from_code_string(
        settings_as_string, databases_dict_start_index)

    return '{}{}{}'.format(
        settings_as_string[:databases_dict_start_index],
        mysql_database_settings_string,
        settings_as_string[databases_dict_end_index:]
    )
    

if __name__ == '__main__':
    arguments = docopt(__doc__, version='modify-django-settings 1.0')

    update_settings_as_string = ''
    # Read the settings file into a string variable
    with open(arguments['<settings-file-path>'], 'r') as settings_file:
        update_settings_as_string = settings_file.read()

    if (arguments['--mysql']):
        update_settings_as_string = overwrite_settings_for_mysql(
            update_settings_as_string, arguments['<mysql-config-file-path>'])

    with open(arguments['<settings-file-path>'], 'w') as settings_file:
        settings_file.write(update_settings_as_string)
    
