"""
modify-django-settings
Usage:
  modify-django-settings <settings-file-path> [--mysql-config-path=<mysql-config-file-path> 
                                               --mysql-db=<mysql-default-db-name> 
                                               --memcached 
                                               --elastic-search
                                               --redis=<urls-file-path>
                                               ]
  modify-django-settings (-h | --help)
Options:
  -h --help                         Show this screen
  --version                         Show version
Help:
  Allows you to easily modify the Django settings.py file. Requires the path
  to the Django settings.py file to modify
"""
from docopt import docopt
import json
import ast
import inspect


# Given python code in string form and a start index, returns the index
# one past the end of the next complete python dict in the string
def get_end_of_dict_index_from_code_string(code_string, start_index):
    braces_count = 0
    num_braces_found = 0
    dict_start_index = 0

    i = start_index

    while braces_count != 0 or num_braces_found == 0:
        char = code_string[i]

        if char == '{':
            if num_braces_found == 0:
                dict_start_index = i

            braces_count += 1
            num_braces_found += 1

        elif char == '}':
            braces_count -= 1

        i += 1

    # Don't do the following, because instead we'll just completely replace
    # 'default' from the Django options
    # In future, though, we might not want to do that, so keep this code here
    # as a reference
    # # Stringify the dict, in case it has references to variables/funcions/etc
    # # Later, we will remove the _cumulus_tmp key/quotes
    # stringified_code = "{{'_cumulus_tmp': '''{}'''}}".format(
    #     code_string[dict_start_index + 1 : i]
    # )

    return i

def get_end_of_list_index_from_code_string(code_string, start_index):
    num_brackets = 0
    brackets_found = 0

    while num_brackets != 0 or brackets_found == 0:
        ch = code_string[start_index]

        if ch == '[':
            num_brackets+=1
            brackets_found+=1
        elif ch == ']':
            num_brackets -= 1
        start_index+=1
    return start_index

def overwrite_settings_for_memcached(settings_as_string):
    memcached_settings_string = ("\n"
    "CACHES = {{\n"
    "\t# This was generated by Stratocumulus, since you initialized a Project\n"
    "\t# with both Django and Memcached! For more information about this setting,\n"
    "\t# see the Django documentation\n"
    "\t'default': {{\n"
    "\t\t'BACKEND':'django.core.cache.backends.memcached.MemcachedCache',\n"
    "\t\t'LOCATION': 'memcached',\n\t}}\n}}").format()

    databases_dict_start_index = settings_as_string.index('DATABASES')
    databases_dict_end_index = get_end_of_dict_index_from_code_string(
        settings_as_string, databases_dict_start_index)


    return '{}{}{}'.format(
        settings_as_string[:databases_dict_end_index],
        memcached_settings_string,
        settings_as_string[databases_dict_end_index:]
    )

def overwrite_settings_for_elasticsearch(settings_as_string):
    start_installed_apps_index = settings_as_string.index('INSTALLED_APPS')
    start_database_dict_index = settings_as_string.index('DATABASES')
    end_database_dict_index = get_end_of_dict_index_from_code_string(settings_as_string, start_database_dict_index)
    end_installed_apps_index = get_end_of_list_index_from_code_string(settings_as_string, start_installed_apps_index)

    new_installed_app_string = "    'django_elasticsearch_dsl',\n"  #For some reason using \t misalligns it
    
    elastic_search_settings_string = ("\n"
    "ELASTICSEARCH_DSL = {{\n"
    "\t# This was generated by Stratocumulus, since you initialized a Project\n"
    "\t# with both Django and Elasticsearch! For more information about this setting,\n"
    "\t# see the Django and elasticsearch_dsl documentation\n"
    "\t'default':{{\n"
    "\t\t'hosts': 'elasticsearch'\n"
    "\t}},\n"
    "}}").format()

    # print('{}{}{}'.format(settings_as_string[:end_index-1],s,settings_as_string[end_index-1:]))
    return '{}{}{}{}{}'.format(settings_as_string[:end_installed_apps_index-1], 
                               new_installed_app_string, 
                               settings_as_string[end_installed_apps_index-1:end_database_dict_index], 
                               elastic_search_settings_string, 
                               settings_as_string[end_database_dict_index:])
    
def overwrite_settings_for_redis(settings_as_string):
    start_installed_apps_index = settings_as_string.index('INSTALLED_APPS')
    start_database_dict_index = settings_as_string.index('DATABASES')
    end_database_dict_index = get_end_of_dict_index_from_code_string(settings_as_string, start_database_dict_index)
    end_installed_apps_index = get_end_of_list_index_from_code_string(settings_as_string, start_installed_apps_index)
    
    new_installed_app_string = "\t'django_rq',\n"

    redis_settings_string = ("\n"
    "RQ_QUEUES = {{\n"
    "\t# This was generated by Stratocumulus, since you initialized a Project\n"
    "\t# with both Django and Redis! For more information about this setting,\n"
    "\t# see the Django and django-rq documentation\n"
    "\t'default':{{\n"
    "\t\t'HOST': 'redis',\n"
    "\t\t'PORT': 6379,\n"
    "\t\t'DB': 0,\n"
    "\t\t'PASSWORD': 'some-password',\n"
    "\t\t'DEFAULT_TIMEOUT': 360,\n"
    "\t}}\n"
    "}}").format()

    return '{}{}{}{}{}'.format(settings_as_string[:end_installed_apps_index-1],
                               new_installed_app_string,
                               settings_as_string[end_installed_apps_index-1:end_database_dict_index],
                               redis_settings_string,
                               settings_as_string[end_database_dict_index:])   

def overwrite_settings_for_mysql(settings_as_string, mysql_config_file_path,
                                mysql_default_db_name):
    # Define the settings string that will be used to hook Django up with
    # MySQL
    # Depending on the text editor, this may only use tabs, even if the original
    # file was set up to use spaces. However, python will not error on this,
    # since the whitespace in a dictionary is not necessary. So, this is fine
    # for now (although would be more ideal if we found a way to replicate
    # the original tabulation mode)
    mysql_database_settings_string = (""
    "DATABASES = {{\n"
    "\t# This was generated by Stratocumulus, since you initialized a Project\n"
    "\t# with both Django and MySQL! For more information about this setting,\n"
    "\t# see the Django documentation\n"
    "\t'default': {{\n"
    "\t\t'ENGINE': 'django.db.backends.mysql',\n"
    "\t\t'HOST': 'mysql',\n").format()

    if mysql_default_db_name:
        mysql_database_settings_string += (""
        "\t\t'NAME': '{mysql_default_db_name}',\n").format(
            mysql_default_db_name=mysql_default_db_name)
    
    mysql_database_settings_string += (""
    "\t\t'OPTIONS': {{\n"
    "\t\t\t'read_default_file': '{user_mysql_config_path}'\n"
    "\t\t}},\n"
    "\t}}\n"
    "}}"
    ).format(user_mysql_config_path=mysql_config_file_path)

    databases_dict_start_index = settings_as_string.index('DATABASES')

    databases_dict_end_index = get_end_of_dict_index_from_code_string(
        settings_as_string, databases_dict_start_index)

    return '{}{}{}'.format(
        settings_as_string[:databases_dict_start_index],
        mysql_database_settings_string,
        settings_as_string[databases_dict_end_index:]
    )
    
def overwrite_urls_for_redis(update_urls_as_string):
    new_url_pattern = ("\tpath('django-rq/', include('django_rq.urls'))\n").format()
    import_index = update_urls_as_string.index("import path")
    import_string = ("\nfrom django.urls import include").format()
    urls_start_index = update_urls_as_string.index("urlpatterns")
    urls_end_index = get_end_of_list_index_from_code_string(update_urls_as_string, urls_start_index)

    return '{}{}{}{}{}'.format(update_urls_as_string[:import_index+len("import path")], 
                               import_string,
                               update_urls_as_string[import_index+len("import path"):urls_end_index-1], 
                               new_url_pattern, 
                               update_urls_as_string[urls_end_index-1:])

if __name__ == '__main__':
    arguments = docopt(__doc__, version='modify-django-settings 1.0')

    update_settings_as_string = ''
    # Read the settings file into a string variable
    with open(arguments['<settings-file-path>'], 'r') as settings_file:
        update_settings_as_string = settings_file.read()

    if (arguments['--mysql-config-path']):
        update_settings_as_string = overwrite_settings_for_mysql(
            update_settings_as_string, arguments['--mysql-config-path'],
            arguments['--mysql-db'])

    if(arguments['--memcached']):
        update_settings_as_string = overwrite_settings_for_memcached(update_settings_as_string)

    if(arguments['--elastic-search']):
        update_settings_as_string = overwrite_settings_for_elasticsearch(update_settings_as_string)

    if(arguments['--redis']):
        update_settings_as_string = overwrite_settings_for_redis(update_settings_as_string)        
        update_urls_as_string = ''
        with open(arguments['--redis'], 'r') as urls_file:
            update_urls_as_string = urls_file.read()
        
        update_urls_as_string = overwrite_urls_for_redis(update_urls_as_string)
        
        with open(arguments['--redis'], 'w') as urls_file:
            urls_file.write(update_urls_as_string)

    with open(arguments['<settings-file-path>'], 'w') as settings_file:
        settings_file.write(update_settings_as_string)
    
